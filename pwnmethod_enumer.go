// Code generated by "enumer -type=PwnMethod -trimprefix=Pwn -json"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _PwnMethodName = "CreateUserCreateGroupCreateComputerCreateAnyObjectDeleteChildrenTargetDeleteObjectInheritsSecurityACLContainsDenyResetPasswordOwnsGenericAllWriteAllWritePropertyAllTakeOwnershipWriteDACLWriteSPNWriteValidatedSPNWriteAllowedToActAddMemberAddMemberGroupAttrAddSelfMemberReadMSAPasswordHasMSAWriteKeyCredentialLinkWriteAttributeSecurityGUIDSIDHistoryEqualityAllExtendedRightsDCReplicationGetChangesDCReplicationSyncronizeDSReplicationGetChangesAllReadLAPSPasswordMemberOfGroupHasSPNHasSPNNoPreauthAdminSDHolderOverwriteACLComputerAffectedByGPOGPOMachineConfigPartOfGPOGPOUserConfigPartOfGPO"

var _PwnMethodIndex = [...]uint16{0, 10, 21, 35, 50, 70, 82, 98, 113, 126, 130, 140, 148, 164, 177, 186, 194, 211, 228, 237, 255, 268, 283, 289, 311, 337, 355, 372, 395, 418, 444, 460, 473, 479, 494, 519, 540, 565, 587}

func (i PwnMethod) String() string {
	i -= 1
	if i >= PwnMethod(len(_PwnMethodIndex)-1) {
		return fmt.Sprintf("PwnMethod(%d)", i+1)
	}
	return _PwnMethodName[_PwnMethodIndex[i]:_PwnMethodIndex[i+1]]
}

var _PwnMethodValues = []PwnMethod{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38}

var _PwnMethodNameToValueMap = map[string]PwnMethod{
	_PwnMethodName[0:10]:    1,
	_PwnMethodName[10:21]:   2,
	_PwnMethodName[21:35]:   3,
	_PwnMethodName[35:50]:   4,
	_PwnMethodName[50:70]:   5,
	_PwnMethodName[70:82]:   6,
	_PwnMethodName[82:98]:   7,
	_PwnMethodName[98:113]:  8,
	_PwnMethodName[113:126]: 9,
	_PwnMethodName[126:130]: 10,
	_PwnMethodName[130:140]: 11,
	_PwnMethodName[140:148]: 12,
	_PwnMethodName[148:164]: 13,
	_PwnMethodName[164:177]: 14,
	_PwnMethodName[177:186]: 15,
	_PwnMethodName[186:194]: 16,
	_PwnMethodName[194:211]: 17,
	_PwnMethodName[211:228]: 18,
	_PwnMethodName[228:237]: 19,
	_PwnMethodName[237:255]: 20,
	_PwnMethodName[255:268]: 21,
	_PwnMethodName[268:283]: 22,
	_PwnMethodName[283:289]: 23,
	_PwnMethodName[289:311]: 24,
	_PwnMethodName[311:337]: 25,
	_PwnMethodName[337:355]: 26,
	_PwnMethodName[355:372]: 27,
	_PwnMethodName[372:395]: 28,
	_PwnMethodName[395:418]: 29,
	_PwnMethodName[418:444]: 30,
	_PwnMethodName[444:460]: 31,
	_PwnMethodName[460:473]: 32,
	_PwnMethodName[473:479]: 33,
	_PwnMethodName[479:494]: 34,
	_PwnMethodName[494:519]: 35,
	_PwnMethodName[519:540]: 36,
	_PwnMethodName[540:565]: 37,
	_PwnMethodName[565:587]: 38,
}

// PwnMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PwnMethodString(s string) (PwnMethod, error) {
	if val, ok := _PwnMethodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PwnMethod values", s)
}

// PwnMethodValues returns all values of the enum
func PwnMethodValues() []PwnMethod {
	return _PwnMethodValues
}

// IsAPwnMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PwnMethod) IsAPwnMethod() bool {
	for _, v := range _PwnMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PwnMethod
func (i PwnMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PwnMethod
func (i *PwnMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PwnMethod should be a string, got %s", data)
	}

	var err error
	*i, err = PwnMethodString(s)
	return err
}
