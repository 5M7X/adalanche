// Code generated by "enumer -type=ObjectType -trimprefix=ObjectType -json"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _ObjectTypeName = "OtherGroupUserComputerManagedServiceAccountOrganizationalUnitContainerGroupPolicyContainerTrust"

var _ObjectTypeIndex = [...]uint8{0, 5, 10, 14, 22, 43, 61, 70, 90, 95}

func (i ObjectType) String() string {
	i -= 1
	if i >= ObjectType(len(_ObjectTypeIndex)-1) {
		return fmt.Sprintf("ObjectType(%d)", i+1)
	}
	return _ObjectTypeName[_ObjectTypeIndex[i]:_ObjectTypeIndex[i+1]]
}

var _ObjectTypeValues = []ObjectType{1, 2, 3, 4, 5, 6, 7, 8, 9}

var _ObjectTypeNameToValueMap = map[string]ObjectType{
	_ObjectTypeName[0:5]:   1,
	_ObjectTypeName[5:10]:  2,
	_ObjectTypeName[10:14]: 3,
	_ObjectTypeName[14:22]: 4,
	_ObjectTypeName[22:43]: 5,
	_ObjectTypeName[43:61]: 6,
	_ObjectTypeName[61:70]: 7,
	_ObjectTypeName[70:90]: 8,
	_ObjectTypeName[90:95]: 9,
}

// ObjectTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ObjectTypeString(s string) (ObjectType, error) {
	if val, ok := _ObjectTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ObjectType values", s)
}

// ObjectTypeValues returns all values of the enum
func ObjectTypeValues() []ObjectType {
	return _ObjectTypeValues
}

// IsAObjectType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ObjectType) IsAObjectType() bool {
	for _, v := range _ObjectTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ObjectType
func (i ObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ObjectType
func (i *ObjectType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ObjectType should be a string, got %s", data)
	}

	var err error
	*i, err = ObjectTypeString(s)
	return err
}
